# autolatex - astah2pdf.transdef
# Copyright (C) 2013  Stephane Galland <galland@arakhne.org>
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; see the file COPYING.  If not, write to
# the Free Software Foundation, Inc., 59 Temple Place - Suite 330,
# Boston, MA 02111-1307, USA.


############################################
# NOTE:
#
# All the options in this file could be postfixed by the keyword
# "for pdf" or "for eps". The keywords "for pdf" indicates that the
# option must be used in PDF mode generation only;
# the keywords "for eps" indicates that the option must be used in
# EPS mode generation only;
# otherwise the option is used in both modes.
#
# The prefix must be written between the name of the option and the
# sign "=".
############################################


# A list of extensions (separated by spaces) of the input files.
INPUT_EXTENSIONS = .asta .jude .juth

# A list of extensions (separated by spaces) of the output files.
OUTPUT_EXTENSIONS for pdf = .pdf
OUTPUT_EXTENSIONS for eps = .eps

# Command line to invoke to translate the files from input to output.
# $in is the environment variable for the input filename.
# $out is the environment variable for the output filename.
# You could use environment variables by prefixing them with the character
# "$", even on Window operating systems. We decide to use the Unix standard
# to obtain a single configuration file for all the operating systems.
# If the command line is empty, you must define a Perl function in
# the variable TRANSLATOR_FUNCTION.
# The space characters are used to split the command line into parameters.
# To put a space character in a parameter, you must enclose the string with
# quotes.
;COMMAND_LINE =

# List of perl packages (separated by spaces) that must be included to run the TRANSLATOR_FUNCTION,
# excluding the AutoLaTeX Core libraries and the following libraries:
# AutoLaTeX::Core::Util AutoLaTeX::Core::Locale AutoLaTeX::Core::OS
# File::Spec File::Path File::Basename File::Copy
;TRANSLATOR_PERL_DEPENDENCIES = 

# Perl code to invoke to translate the files from input to output.
# $in is the environment variable for the input filename.
# $out is the environment variable for the output filename.
# @inexts is the array of the extensions defined in variable INPUT_EXTENSIONS.
# $outext is the extension defined in variable OUTPUT_EXTENSION.
# $ispdfmode indicates if the translator is used in PDF mode.
# $isepsmode indicates if the translator is used in EPS mode.
# If the command line is empty, you must define a Perl function in 
# the variable TRANSLATOR_FUNCTION.
TRANSLATOR_FUNCTION =<<EOL {
	my $INITIAL_HEAP_SIZE = "64m";
	my $MAXIMUM_HEAP_SIZE = "1024m";
	my @JAVA_OPTS = ("-Xms$INITIAL_HEAP_SIZE", "-Xmx$MAXIMUM_HEAP_SIZE");

	my @libraries = (
		'astah-pro.jar',
		'astah-professional.jar',
		'astah-uml.jar',
	);

	# Detect the Astah installation
	if ( ! $ENV{"ASTAH_HOME"} ) {
		my @tmp = ('astah-pro','astah-uml');
		my $tmp = undef;
		for(my $i=0; $i<@tmp && !$tmp; $i++) {
			my $bin = $tmp[$i];
			$bin = which("$bin");
			if ( $bin && -x "$bin" ) {
				$bin = readlink_osindep("$bin");
				$tmp = dirname("$bin");
			}
		}
		if ( ! $tmp ) {
			@tmp = ('/usr/lib/astah_pro',
				'/usr/lib/astah_professional',
				'/usr/lib/astah_uml');
			for(my $i=0; $i<@tmp && !$tmp; $i++) {
				my $dir = $tmp[$i];
				if ( -d "$dir" ) {
					$tmp = $dir;
				}
			}
			if ( ! $tmp ) {
				printErr("Unable to find the installation directory of Astah Professional or Astah UML. Please define the ASTAH_HOME environment variable.");
			}
		}
		$ENV{"ASTAH_HOME"} = $tmp;
	}

	# Detect the Java library of astah
	my $jarfile;
	for(my $i=0; $i<@libraries && !$jarfile; $i++) {
		my $library = $libraries[$i];
		if ( -f File::Spec->catfile("$ENV{ASTAH_HOME}", "$library" ) ) {
			$jarfile = $library;
		}
	}
	if ( ! $jarfile ) {
		printErr("Unable to find the java library of Astah. Please define the ASTAH_HOME environment variable.");
	}

	# Prepare the generation from Astah
	my $outputDir = File::Spec->rel2abs(dirname("$in"));
	my $shortBasename = basename("$in",@inexts);
	my $astahOutputDir = File::Spec->catfile("$outputDir","$shortBasename");
	if ( -d "$astahOutputDir" ) {
		remove_tree("$astahOutputDir") or printErr("$astahOutputDir: $!");
	}

	# Generation of the SVG from Astah
	runCommandOrFail(
		'java',
		@JAVA_OPTS,
		'-cp',
		File::Spec->catfile("$ENV{ASTAH_HOME}","$jarfile"),
		'com.change_vision.jude.cmdline.JudeCommandRunner',
		'-image', 'all',
		'-f', "$in",
		'-t', 'svg',
		'-o', "$outputDir");

	# Generation of the PDF/PS from the SVG
	my @generatedFiles = ();
	local *OUTDIR;
	opendir(*OUTDIR, "$astahOutputDir") or printErr("$astahOutputDir: $!");
	while (my $fn = readdir(*OUTDIR)) {
		if ($fn ne File::Spec->updir() && $fn ne File::Spec->curdir()
				&& $fn =~ /\.svg$/s) {
			my $svgFile = File::Spec->catfile("$astahOutputDir", "$fn");
			push @generatedFiles, "$svgFile";

			# Remove the background
			my $svgcontent = readFileLines("$svgFile");
			$svgcontent =~ s/\Q<rect\E\s+.*?\/?>//s;
			writeFileLines("$svgFile", "$svgcontent");
		}
	}
	closedir(*OUTDIR);

	# Move the generated files
	if (@generatedFiles>1) {
		my $template = File::Spec->catfile(
					dirname($out),
					basename($out,$outext)).'_';
		foreach my $file (@generatedFiles) {
			my $bn = basename($file,'.svg');
			$bn =~ s/\s+/_/sg;
			$bn = "$template$bn$outext";
			runTranslator( 'svg2pdf', "$file", "$bn");
		}
	}
	elsif (@generatedFiles) {
		my $file = shift @generatedFiles;
		runTranslator('svg2pdf', "$file", "$out");
	}
	else {
		printErr("No file generated.");
	}

	if ( -d "$astahOutputDir" ) {
		remove_tree("$astahOutputDir") or printErr("$astahOutputDir: $!");
	}
}
EOL

# List of patterns that are representing the output files to remove when cleaning.
# The syntax of the variable is a space-separated list of shell patterns.
# $in is the basename (without the extension) of the input file.
FILES_TO_CLEAN = $out_*.pdf $out_*.eps

