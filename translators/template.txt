# autolatex - <FILE>.transdef
# Copyright (C) 2013  Stephane Galland <galland@arakhne.org>
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; see the file COPYING.  If not, write to
# the Free Software Foundation, Inc., 59 Temple Place - Suite 330,
# Boston, MA 02111-1307, USA.


############################################
# NOTE:
#
# All the options in this file could be postfixed by the keyword
# "for pdf" or "for eps". The keywords "for pdf" indicates that the
# option must be used in PDF mode generation only;
# the keywords "for eps" indicates that the option must be used in
# EPS mode generation only;
# otherwise the option is used in both modes.
#
# The prefix must be written between the name of the option and the
# sign "=".
############################################


# A list of extensions (separated by spaces) of the input files.
;INPUT_EXTENSIONS = 

# A list of extensions (separated by spaces) of the output files.
;OUTPUT_EXTENSIONS = 

# Command line to invoke to translate the files from input to output.
# $in is the environment variable for the input filename.
# $inext is the environment variable for the extension of the input filename.
# $out is the environment variable for the output filename.
# $outbasename is the basename without the extension and the dirname of the output file.
# $outwoext is the basename without the extension but with the dirname of the out file.
# You could use environment variables by prefixing them with the character
# "$", even on Window operating systems. We decide to use the Unix standard
# to obtain a single configuration file for all the operating systems.
# If the command line is empty, you must define a code function in
# the variable TRANSLATOR_FUNCTION.
# The space characters are used to split the command line into parameters.
# To put a space character in a parameter, you must enclose the string with
# quotes.
;COMMAND_LINE =

# List of perl packages that must be included to run the TRANSLATOR_FUNCTION,
# excluding the AutoLaTeX Core libraries and the following libraries:
# AutoLaTeX::Core::Util AutoLaTeX::Core::Locale AutoLaTeX::Core::OS
# File::Spec File::Path File::Basename File::Copy
# If you want to include a particular feature as done in Perl with:
#     use ThePackage::TheCass qw(feature);
# Please use the following syntax:
#     ThePackage::TheCass qw(feature)
#     ThePackage::TheCass qw{feature}
#     ThePackage::TheCass 'feature'
;TRANSLATOR_PERL_DEPENDENCIES = 

# Code to invoke to translate the files from input to output.
# $in is the environment variable for the input filename.
# $inext is the current extension of the input filename.
# $out is the environment variable for the output filename.
# $outbasename is the basename without the extension and without the dirname of the out file.
# $outwoext is the basename without the extension but with the dirname of the out file.
# @inexts is the array of the extensions defined in variable INPUT_EXTENSIONS.
# $outext is the first extension defined in variable OUTPUT_EXTENSION.
# @outexts are the extensions defined in variable OUTPUT_EXTENSION.
# $ispdfmode indicates if the translator is used in PDF mode.
# $isepsmode indicates if the translator is used in EPS mode.
# If the command line is empty, you must define a code function in 
# the variable TRANSLATOR_FUNCTION.
#
# LANGUAGE USED FOR THE CODE:
# By default, the code put in TRANSLATOR_FUNCTION is written in the Perl language.
# If you want to use another scripting language, you must specify the script
# interpreter with the keyword "with". The first line below is the definition of
# a function in Perl. The second line below is the definition of a function in
# Python. Note that, "with <language>" must be put before "for <mode>".
# Note that for other languages than Perl, the variable names explained above are
# all prefixed by the character '_', eg. '$out' must be read '_out'.
;TRANSLATOR_FUNCTION =
;TRANSLATOR_FUNCTION with python =

# List of patterns that are representing the output files to remove when cleaning.
# The syntax of the variable is a space-separated list of shell patterns.
# $in is the basename (without the extension and without the directory) of the input file.
# $out is the basename (without the extension and without the directory) of the output file.
;FILES_TO_CLEAN =

