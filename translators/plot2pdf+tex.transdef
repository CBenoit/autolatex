# autolatex - plot2pdf+tex.transdef
# Copyright (C) 1998-2013  Stephane Galland <galland@arakhne.org>
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; see the file COPYING.  If not, write to
# the Free Software Foundation, Inc., 59 Temple Place - Suite 330,
# Boston, MA 02111-1307, USA.

# A list of extensions (separated by spaces) of the input files.
INPUT_EXTENSIONS = .plott .plot_tex .plottex .plot+tex

# Extensions of the output file.
OUTPUT_EXTENSIONS = .pdf .pdftex_t

# Command line to invoke to translate the files from input to output.
# $in is the environment variable for the input filename.
# $out is the environment variable for the output filename.
# You could use environment variables by prefixing them with the character
# "$", even on Window operating systems. We decide to use the Unix standard
# to obtain a single configuration file for all the operating systems.
# If the command line is empty, you must define a Perl function in
# the variable TRANSLATOR_FUNCTION.
# The space characters are used to split the command line into parameters.
# To put a space character in a parameter, you must enclose the string with
# quotes.
;COMMAND_LINE =

# List of perl packages (separated by spaces) that must be included to run the TRANSLATOR_FUNCTION,
# excluding the AutoLaTeX Core libraries and the following libraries:
# AutoLaTeX::Core::Util AutoLaTeX::Core::Locale AutoLaTeX::Core::OS
# File::Spec File::Path File::Basename File::Copy
TRANSLATOR_PERL_DEPENDENCIES = Cwd

# Perl code to invoke to translate the files from input to output.
# $in is the environment variable for the input filename.
# $out is the environment variable for the output filename.
# @inexts is the array of the extensions defined in variable INPUT_EXTENSIONS.
# $outext is the extension defined in variable OUTPUT_EXTENSION.
# If the command line is empty, you must define a Perl function in 
# the variable TRANSLATOR_FUNCTION.
TRANSLATOR_FUNCTION =<<EOL {
	my $curdir = getcwd();
	my $workingDir = File::Spec->rel2abs(dirname("$in"));
	my $outbasename = basename("$out",$outext);
	# Fixed plot file
	my $extPlotFile = File::Spec->catfile(
				"$workingDir",
				"$outbasename.autolatex.plot");
	# TeX file generated by GNU plot
	my $texFile = File::Spec->catfile(
				"$workingDir",
				"$outbasename.autolatex.tex");
	# EPS file generated by GNU plot
	my $epsFile = File::Spec->catfile(
				"$workingDir",
				"$outbasename.autolatex.eps");
	# PS file generated by GNU plot
	my $psFile = File::Spec->catfile(
				"$workingDir",
				"$outbasename.autolatex.ps");
	# Additional output which contains the TeX macros
	my $pdftexFile = File::Spec->catfile(
				dirname("$out"),
				"$outbasename.pdftex_t");

	# Fixing the plot file to generate the correct output
	local *TMPFILE;
	local *INFILE;
	open(*TMPFILE, ">$extPlotFile") or printErr("$extPlotFile: $!");
	open(*INFILE, "<$in") or printErr("$in: $!");
	print TMPFILE "set terminal pstex auxfile color\n";
	print TMPFILE "set output \"$texFile\"\n\n";
	while (my $line = <INFILE>) {
		print TMPFILE "$line";
	}
	print TMPFILE "unset output\n";
	print TMPFILE "quit\n";
	close(*INFILE);
	close(*TMPFILE);
	# Change directory in case the plot file contains relative references to data files
	chdir("$workingDir") or printErr("$workingDir: $!");
	runCommandOrFailRedirectTo( "$epsFile", 'gnuplot', "$extPlotFile" );
	chdir("$curdir") or printErr("$curdir: $!");

	if (! -f "$epsFile") {
		printErr("GNU plot has not generated the file: $epsFile");
	}
	if (! -f "$texFile") {
		printErr("GNU plot has not generated the file: $texFile");
	}
	if (! -f "$psFile") {
		printErr("GNU plot has not generated the file: $psFile");
	}

	# Create the .pdftex_t file
	open(*TMPFILE,"> $pdftexFile") or printErr("$pdftexFile: $!\n");
	open(*INFILE,"< $texFile") or printErr("$texFile: $!\n");
	print TMPFILE "\\begin{picture}(0,0)%\n";
	print TMPFILE "\\includegraphics{$out}%\n";
	print TMPFILE "\\end{picture}%\n";
	my @lines = <INFILE>;
	my $content = join('',@lines);
	$content =~ s/\\special\s*\{.*?\}\s*//sg;
	print TMPFILE "$content";
	close(*INFILE);
	close(*TMPFILE);

	# Translate the generated
	runTranslator( 'eps2pdf', "$psFile", "$out" );

	# Remove tmp files
	unlink("$extPlotFile");
	unlink("$epsFile");
	unlink("$psFile");
	unlink("$texFile");
}
EOL

# List of patterns that are representing the output files to remove when cleaning.
# The syntax of the variable is a space-separated list of shell patterns.
# $in is the basename (without the extension) of the input file.
FILES_TO_CLEAN = $out.pdftex_t

