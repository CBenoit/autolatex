# autolatex - xmi2pdf_umbrello.transdef
# Copyright (C) 1998-2013  Stephane Galland <galland@arakhne.org>
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; see the file COPYING.  If not, write to
# the Free Software Foundation, Inc., 59 Temple Place - Suite 330,
# Boston, MA 02111-1307, USA.


############################################
# NOTE:
#
# All the options in this file could be postfixed by the keyword
# "for pdf" or "for eps". The keywords "for pdf" indicates that the
# option must be used in PDF mode generation only;
# the keywords "for eps" indicates that the option must be used in
# EPS mode generation only;
# otherwise the option is used in both modes.
#
# The prefix must be written between the name of the option and the
# sign "=".
############################################


# A list of extensions (separated by spaces) of the input files.
INPUT_EXTENSIONS = .xmi

# A list of extensions (separated by spaces) of the output files.
OUTPUT_EXTENSIONS for pdf = .pdf
OUTPUT_EXTENSIONs for eps = .eps

# Command line to invoke to translate the files from input to output.
# $in is the environment variable for the input filename.
# $out is the environment variable for the output filename.
# You could use environment variables by prefixing them with the character
# "$", even on Window operating systems. We decide to use the Unix standard
# to obtain a single configuration file for all the operating systems.
# If the command line is empty, you must define a Perl function in
# the variable TRANSLATOR_FUNCTION.
# The space characters are used to split the command line into parameters.
# To put a space character in a parameter, you must enclose the string with
# quotes.
;COMMAND_LINE = 

# List of perl packages (separated by spaces) that must be included to run the TRANSLATOR_FUNCTION,
# excluding the AutoLaTeX Core libraries and the following libraries:
# AutoLaTeX::Core::Util AutoLaTeX::Core::Locale AutoLaTeX::Core::OS
# File::Spec File::Path File::Basename File::Copy
;TRANSLATOR_PERL_DEPENDENCIES = 

# Perl code to invoke to translate the files from input to output.
# $in is the environment variable for the input filename.
# $out is the environment variable for the output filename.
# @inexts is the array of the extensions defined in variable INPUT_EXTENSIONS.
# $outext is the extension defined in variable OUTPUT_EXTENSION.
# $ispdfmode indicates if the translator is used in PDF mode.
# $isepsmode indicates if the translator is used in EPS mode.
# If the command line is empty, you must define a Perl function in 
# the variable TRANSLATOR_FUNCTION.
TRANSLATOR_FUNCTION =<<EOL {
	# Create tmp dir
	my $outdir = File::Spec->catfile(
			dirname("$in"),
			basename("$in", @inexts));
	if (-d "$outdir") {
		remove_tree("$outdir") or printErr("$outdir: $!");
	}
	make_path($outdir) or printErr("$outdir: $!");

	# Generation of the EPS from XMI
	runCommandOrFail(
		'umbrello',
		'--export', 'eps',
		'--directory', "$outdir",
		"$in");

	#Â Translate the generated files
	my @generatedFiles = ();
	local *INDIR;
	opendir(*INDIR, "$outdir") or printErr("$outdir: $!");
	while (my $fn = readdir(*INDIR)) {
		if ($fn ne File::Spec->updir() && $fn ne File::Spec->curdir()
			&& $fn =~ /\.eps$/) {
			my $ffn = File::Spec->catfile("$outdir", "$fn");
			if (-f "$ffn") {
				push @generatedFiles, "$ffn";
			}
		}
	}
	closedir(*INDIR);

	if (@generatedFiles>1) {
		my $template = File::Spec->catfile(
					dirname($out),
					basename($out,$outext)).'_';
		foreach my $file (@generatedFiles) {
			my $bn = basename($file,'.eps');
			$bn =~ s/\s+/_/sg;
			runTranslator( 'eps2pdf', "$file", "$template$bn.pdf");
		}
	}
	elsif (@generatedFiles) {
		my $file = shift @generatedFiles;
		runTranslator( 'eps2pdf', "$file", "$out");
	}
	else {
		printErr("No file generated");
	}

	if (-d "$outdir") {
		remove_tree("$outdir") or printErr("$outdir: $!");
	}
}
EOL

# List of patterns that are representing the output files to remove when cleaning.
# The syntax of the variable is a space-separated list of shell patterns.
# $in is the basename (without the extension) of the input file.
FILES_TO_CLEAN = $out_*.pdf $out_*.eps

