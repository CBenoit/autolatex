#!/usr/bin/env python3
# -*- coding: utf-8 -*-
#
# Copyright (C) 1998-2021 Stephane Galland <galland@arakhne.org>
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; see the file COPYING.  If not, write to
# the Free Software Foundation, Inc., 59 Temple Place - Suite 330,
# Boston, MA 02111-1307, USA.

'''
BibTeX tools.
'''

import re

######################################################################
##
class BibTeXErrorParser(object):
	'''
	Parser for errors generated by BibTeX.
	'''

	def __init__(self):
		'''
		Construct the parser.
		'''
		pass

	def parseLog(self,  defaultFilename : str,  log : str) -> object:
		'''
		Parse the BibTeX log and replies the discovered error.
		:param defaultFilename: The name of the BibTeX file to parse.
		:type defaultFilename: str
		:param log: Content of the log.
		:type log: str
		:rtype: object
		'''
		currentError = dict()
		previousLine = ''
		for line in re.split('[\n\r]',  log):
			if currentError:
				m = re.search('^\s*:\s*(.*?)\s*$', line, re.S)
				if m:
					currentError['message'] += " " + m.group(1)
				else:
					return currentError
			else:
				m = re.search('^\s*(.*?)\s*\-\-\-line\s+([0-9]+)\s+of\s+file\s+(.*?)\s*$', line, re.IGNORECASE | re.S)
				if m:
					message = m.group(1)
					lineno = int(m.group(2))
					filename = m.group(3)
					if not message:
						message = previousLine.strip()
					currentError = {
						'filename': filename, 
						'lineno': lineno, 
						'message': message
					}
					previousLine = ''
				else:
					previousLine = line
					currentError = dict()
		if currentError:
			return currentError
		return None
